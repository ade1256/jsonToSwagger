{"version":3,"sources":["Containers/ConvertForm/ConvertForm.style.js","Containers/ConvertForm/ConvertForm.component.js","Config/Base.js","Services/BaseService.js","Services/Swagger/Swagger.js","Containers/ConvertForm/ConvertForm.container.js","Pages/Home/Home.component.js","Pages/Home/Home.container.js","Config/Router.js","index.style.js","App.js","serviceWorker.js","index.js"],"names":["Result","styled","div","WrapperForm","ConvertFormComponent","props","handleSubmit","fields","swaggerJson","form","isFieldTouched","getFieldDecorator","getFieldError","validateField","fieldName","_mappingField","gutter","map","item","span","size","Item","label","validateStatus","field_name","help","rules","required","message","rows","value","layout","onSubmit","type","htmlType","BaseService","url","axiosCreate","axios","create","baseURL","headers","Accept","interceptors","response","use","data","error","Promise","reject","_createAxiosInterceptor","Base","get","schema","post","WrapConvertFormContainer","Form","name","useState","setSwaggerJson","useEffect","a","async","info","SwaggerService","then","success","catch","e","preventDefault","validateFields","err","values","JSON","parse","res","HomeComponent","HomeContainer","routeList","path","component","HomePage","RouterSwitch","route","exact","AppWrapper","ContentCenter","Header","Layout","Footer","Content","App","Router","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e94f16d.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Result = styled.div`\n  position: relative;\n\n  .ant-input {\n    margin-top: 8px;\n  }\n`;\n\nconst WrapperForm = styled.div`\n  position: relative;\n  margin-top: 32px;\n`;\n\nexport { Result, WrapperForm };\n","import React from \"react\";\nimport { Form, Button, Row, Col } from \"antd\";\nimport TextArea from \"antd/lib/input/TextArea\";\nimport { Result, WrapperForm } from \"./ConvertForm.style\";\n\nconst ConvertFormComponent = props => {\n  const { handleSubmit, fields, swaggerJson } = props;\n  const { isFieldTouched, getFieldDecorator, getFieldError } = props.form;\n\n  const _form = () => (\n    <Form layout=\"vertical\" onSubmit={handleSubmit}>\n      {_mappingField()}\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Convert now\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n\n  const validateField = fieldName =>\n    isFieldTouched(fieldName) && getFieldError(fieldName);\n\n  const _mappingField = () => (\n    <Row gutter={8}>\n      {fields.map(item => (\n        <Col span={item.size}>\n          <Form.Item\n            label={item.label}\n            validateStatus={validateField(item.field_name) ? \"error\" : \"\"}\n            help={validateField(item.field_name) || \"\"}\n          >\n            {getFieldDecorator(item.field_name, {\n              rules: [\n                {\n                  required: item.required,\n                  message: `Please input ${item.field_name}`\n                }\n              ]\n            })(<TextArea rows={12} />)}\n          </Form.Item>\n        </Col>\n      ))}\n      <Col span={12}>\n        <Result>\n          <label>Result</label>\n          <TextArea rows={12} value={swaggerJson} />\n        </Result>\n      </Col>\n    </Row>\n  );\n  return <WrapperForm>{_form()}</WrapperForm>;\n};\n\nexport default ConvertFormComponent;\n","export default {\n  PING: `/ping`,\n  CONVERT: '/convert'\n}","import axios from \"axios\";\n\nconst _createAxiosInterceptor = url => {\n  const axiosCreate = axios.create({\n    baseURL: url,\n    headers: {\n      Accept: \"application/json\",\n      \"Accept-Language\": \"es\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  axiosCreate.interceptors.response.use(\n    response => {\n      return response.data;\n    },\n    error => {\n      return Promise.reject(error);\n      // eslint-disable-next-line no-unreachable\n      console.log(error);\n    }\n  );\n\n  return axiosCreate;\n};\n\nconst BaseService = _createAxiosInterceptor(\"https://json-any.herokuapp.com/\");\n\nexport default BaseService;\n","import Base from \"../../Config/Base\";\nimport BaseService from \"../BaseService\";\n\nconst GET_PING = () => {\n  const url = Base.PING;\n  return BaseService.get(url);\n};\n\nconst POST_CONVERT = schema => {\n  const url = Base.CONVERT;\n  return BaseService.post(url, schema);\n};\n\nexport default {\n  GET_PING,\n  POST_CONVERT\n};\n","import React, { useEffect, useState } from \"react\";\nimport ConvertFormComponent from \"./ConvertForm.component\";\nimport { Form, message } from \"antd\";\nimport { SwaggerService } from \"../../Services\";\n\nconst ConvertFormContainer = props => {\n  const [swaggerJson, setSwaggerJson] = useState(null);\n  const fields = [\n    {\n      label: \"Paste your schema json\",\n      field_name: \"schema\",\n      required: true,\n      size: 12\n    }\n  ];\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    props.form.validateFields(async (err, values) => {\n      if (!err) {\n        message.info(\"Converting...\")\n        await SwaggerService.POST_CONVERT(JSON.parse(values.schema))\n          .then(res => {\n            message.success(\"Your schema successfully converted.\")\n            setSwaggerJson(res);\n          })\n          .catch(err => {\n            message.error(\n              \"Error converting, please check again your schema. It must be JSON formatted !\"\n            );\n          });\n      }\n    });\n  };\n\n  useEffect(() => {\n    const _pingServer = async () => {\n      message.info(\"Checking server ...\");\n      await SwaggerService.GET_PING()\n        .then(() => {\n          message.success(\"Server 200 OK\");\n        })\n        .catch(() => {\n          message.error(\n            \"Server didn't respond. Please refresh this page again..\"\n          );\n        });\n    };\n    _pingServer();\n  }, []);\n  return (\n    <div>\n      <ConvertFormComponent\n        handleSubmit={handleSubmit}\n        fields={fields}\n        swaggerJson={swaggerJson}\n        {...props}\n      />\n    </div>\n  );\n};\n\nconst WrapConvertFormContainer = Form.create({\n  name: \"ConvertFormContainer\"\n})(ConvertFormContainer);\n\nexport default WrapConvertFormContainer;\n","import React from 'react';\nimport { ConvertForm } from '../../Containers';\n\nconst HomeComponent = () => {\n  return (\n    <div>\n      <ConvertForm />\n    </div>\n  );\n};\n\nexport default HomeComponent;","import React from 'react';\nimport HomeComponent from './Home.component';\n\nconst HomeContainer = () => {\n  return (\n    <div>\n      <HomeComponent />\n    </div>\n  );\n};\n\nexport default HomeContainer;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { HomePage } from \"../Pages\";\n\nconst routeList = [\n  { path: \"/\", component: HomePage },\n  { path: \"/home\", component: HomePage },\n  { path: \"/jsonToSwagger\", component: HomePage }\n];\n\nconst RouterSwitch = () => (\n  <div>\n    <Switch>\n      {routeList.map(route => (\n        <Route path={route.path} component={route.component} exact />\n      ))}\n    </Switch>\n  </div>\n);\n\nexport default RouterSwitch;\n","import styled from \"styled-components\";\n\nconst AppWrapper = styled.div`\n  position: relative;\n\n  .ant-layout-header {\n    background: #2196f3;\n    color: #ffffff;\n    font-size: 24px;\n    h1 {\n      color: #ffffff;\n    }\n  }\n\n  .ant-layout-content {\n    min-height: 100vh;\n  }\n\n  .ant-layout-footer {\n    text-align: center;\n  }\n`;\n\nconst ContentCenter = styled.div`\n  position: relative;\n  margin: 0 35px;\n`;\n\nexport { AppWrapper, ContentCenter };\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Config/Router\";\nimport { Layout } from \"antd\";\nimport { AppWrapper, ContentCenter } from \"./index.style\";\nconst { Header, Footer, Content } = Layout;\n\nconst App = () => (\n  <BrowserRouter>\n    <AppWrapper>\n      <Layout>\n        <Header>\n          <h1>JSON to Swagger</h1>\n        </Header>\n        <Content>\n          <ContentCenter>\n            <Router />\n          </ContentCenter>\n        </Content>\n        <Footer>All right reserved &copy; 2020</Footer>\n      </Layout>\n    </AppWrapper>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}